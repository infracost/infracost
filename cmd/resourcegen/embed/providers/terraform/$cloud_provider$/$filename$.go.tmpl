package {{ .CloudProvider }}

import (
	"github.com/infracost/infracost/internal/resources/{{ .CloudProvider }}"
	"github.com/infracost/infracost/internal/schema"
	{{- if .WithHelp }}

	"strings"
	{{- end }}
)

func {{.RegistryFuncName}}() *schema.RegistryItem {
	return &schema.RegistryItem{
		Name:  "{{ .FullResourceName }}",
		RFunc: {{ .RFuncName }},
		{{- if (eq .CloudProvider "azure") }}
		ReferenceAttributes: []string{
			"resource_group_name",
		},
		{{- end }}
	}
}

func {{ .RFuncName }}(d *schema.ResourceData, u *schema.UsageData) *schema.Resource {
	{{- if (eq .CloudProvider "azure") }}
	region := lookupRegion(d, []string{"resource_group_name"})
	{{- else }}
	region := d.Get("region").String()
	{{- end }}
	{{- if .WithHelp }}

	// In {{.RFuncName}} we parse the resource data coming from d
	// into the underlying {{ .ResourceName }}. We use schema.ResourceData lookup
	// to find data stored on attributes in the resource. This can be done as follows:
	sku := d.Get("sku_name").String()
	instanceType := strings.Split(sku, "_")[0]
	count := d.Get("terraformFieldThatHasNumberOfInstances").Int()

	usageType := "default"
	if !d.IsEmpty("usageType") {
		usageType = d.Get("usageType").String()
	}

	r := &{{ .CloudProvider }}.{{ .ResourceName }}{
		Address:       d.Address,
		Region:        region,
		InstanceCount: count,
		InstanceType:  instanceType,
		UsageType:     usageType,
	}

	{{- else }}
	r := &{{ .CloudProvider }}.{{ .ResourceName }}{
		Address: d.Address,
		Region:  region,
	}
	{{- end }}
	r.PopulateUsage(u)

	return r.BuildResource()
}
